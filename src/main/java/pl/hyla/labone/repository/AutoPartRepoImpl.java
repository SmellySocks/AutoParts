package pl.hyla.labone.repository;

import org.springframework.jdbc.support.xml.SqlXmlFeatureNotImplementedException;
import pl.hyla.labone.domain.autoPart;
import pl.hyla.labone.domain.autoPartTime;

import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

public class AutoPartRepoImpl implements AutoPartRepository{
    private Connection connection;
    private PreparedStatement addPartStmt;
    private PreparedStatement getAutoPartByIDStmt;
    private PreparedStatement getAllAutoPortsStmt;
    private PreparedStatement updateAutoPartStmt;
    private PreparedStatement getPartDateStmt;
    private PreparedStatement getByNameStmt;
    private PreparedStatement deleteTableStmt;
    private PreparedStatement deleteByIdStmt;

    public AutoPartRepoImpl(Connection connection) throws SQLException {
        this.connection = connection;
        if(!isDatabaseReady())
            createTables();
        setConnection(connection);
    }

    public AutoPartRepoImpl() throws SQLException {
        this.connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/testdb");
        if(!isDatabaseReady())
            createTables();
        setConnection(connection);
    }
    public Connection getConnection(){
        return connection;
    }

    public void setConnection(Connection connection) throws SQLException{
        this.connection = connection;
        addPartStmt = connection.prepareStatement("INSERT INTO AutoPart (name, price) VALUES (?, ?)");
        getAllAutoPortsStmt = connection.prepareStatement("SELECT * FROM AutoPart");
        getAutoPartByIDStmt = connection.prepareStatement("SELECT * FROM AutoPart WHERE id = ?");
        getByNameStmt = connection.prepareStatement("SELECT * FROM AutoPart WHERE name = ?");
        deleteTableStmt = connection.prepareStatement("DROP TABLE AutoPart");
        updateAutoPartStmt = connection.prepareStatement("UPDATE AutoPart SET name = ? WHERE id = ?");
        deleteByIdStmt = connection.prepareStatement("DELETE FROM AutoPart WHERE id = ?");


    }

    public void createTables() throws SQLException {
            connection.createStatement().executeUpdate(
                    "CREATE TABLE "
                            + "AutoPart(id int GENERATED BY DEFAULT AS IDENTITY, "
                            + "name varchar(20), "
                            + "price int)");
        }

    public boolean isDatabaseReady(){
        try{
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean exists = false;
            while (rs.next()) {
                if("AutoPart".equalsIgnoreCase(rs.getString("TABLE_NAME"))){
                    exists = true;
                    break;
                }
            }
            return exists;
        } catch (SQLException e){
            return false;
        }
    }
    @Override
    public List<autoPart> getAll(){
        List<autoPart> parts = new LinkedList<>();
        try{
            ResultSet resultSet = getAllAutoPortsStmt.executeQuery();
            while(resultSet.next()){
                autoPart p = new autoPart();
                p.setId(resultSet.getInt("id"));
                p.setPartName(resultSet.getString("name"));
                parts.add(p);
            }
        } catch (SQLException e){
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return parts;
    }

    @Override
    public autoPart getByID(int id) throws SQLException{
        getAutoPartByIDStmt.setInt(1, id);
        ResultSet resultSet = getAutoPartByIDStmt.executeQuery();
        if(resultSet.next()){
            autoPart autoPart = new autoPart();
            autoPart.setId(resultSet.getInt("id"));
            autoPart.setPartName(resultSet.getString("name"));
            return autoPart;
        } else{
            return null;
        }
    }

    @Override
    public autoPart getByName(String name) throws SQLException{
        getByNameStmt.setString(1, name);
        ResultSet resultSet = getByNameStmt.executeQuery();
        if(resultSet.next()){
            autoPart autoPart = new autoPart();
            autoPart.setId(resultSet.getInt("id"));
            autoPart.setPartName(resultSet.getString("name"));
            autoPart.setPrice(resultSet.getInt("price"));
            return autoPart;
        } else{
            return null;
        }
    }
    @Override
    public void addAutoPart(autoPart autoPart){
        try {
            addPartStmt.setString(1, autoPart.getPartName());
            addPartStmt.setInt(2, autoPart.getPrice());
            addPartStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
    }
    @Override
    public void deleteAutoPart(autoPart autoPart) throws SQLException{
        deleteByIdStmt.setInt(1, autoPart.getId());
        deleteByIdStmt.executeUpdate();
    }
    @Override
    public void updateAutoPart(int id, autoPart newAutoPart) throws SQLException{
        updateAutoPartStmt.setInt(2, id);
        updateAutoPartStmt.setString(1, newAutoPart.getPartName());
        updateAutoPartStmt.executeQuery();
    }
    @Override
    public void dropDataTable() throws SQLException{
        deleteTableStmt.executeQuery();
    }

}
