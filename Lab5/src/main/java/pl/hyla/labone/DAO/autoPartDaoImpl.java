package pl.hyla.labone.DAO;

import pl.hyla.labone.domain.autoPartTime;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

public class autoPartDaoImpl implements DAO {
    private Connection connection;
    private PreparedStatement addPartStmt;
    private PreparedStatement getAutoPartByID;
    private PreparedStatement getAllAutoPortsStmt;
    private PreparedStatement updateDateAutoPart;
    private PreparedStatement getPartDate;

    public autoPartDaoImpl(Connection connection) throws SQLException{
        this.connection = connection;
        if(!isDatabaseReady())
            createTables();
        setConnection(connection);
    }

    public autoPartDaoImpl() {

    }

    public void createTables() throws SQLException {
        try {
            connection.createStatement().executeUpdate(
                    "CREATE TABLE "
                            + "AutoPart(id bigint GENERATED BY DEFAULT AS IDENTITY, "
                            + "name varchar(20) NOT NULL, "
                            + "price int NOT NULL, "
                            + "createTime TIMESTAMP, "
                            + "readTime TIMESTAMP, "
                            + "modifyTime TIMESTAMP)");
        } catch (SQLException e) {
        }
    }
    public boolean isDatabaseReady(){
        try{
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean exists = false;
            while (rs.next()) {
                if("AutoPart".equalsIgnoreCase(rs.getString("TABLE_INDEX"))){
                    exists = true;
                    break;
                }
            }
            return exists;
        } catch (SQLException e){
            return false;
        }
    }

    @Override
    public Connection getConnection(){
        return connection;
    }
    @Override
    public void setConnection(Connection connection) throws SQLException{
        this.connection = connection;
        addPartStmt = connection.prepareStatement("INSERT INTO AutoPart (name, price, createTime) VALUES (?, ?, now())");
    }
    @Override
    public autoPartTime findPartById(int id) throws SQLException{
        autoPartTime autoPartTime = new autoPartTime();
        getAutoPartByID = connection.prepareStatement("SELECT * FROM AutoPart WHERE id = " + id);
        try{
            ResultSet rs = getAutoPartByID.executeQuery();
            updateDateInSql(id, 1);
            while(rs.next()){
                autoPartTime.setId(rs.getInt("id"));
                autoPartTime.setPartName(rs.getString("name"));
                autoPartTime.setPrice(rs.getInt("price"));
                autoPartTime.setCreateTime(rs.getDate("createTime"));
                autoPartTime.setReadTime(this.currentDate());
            }
        } catch (SQLException e){
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return autoPartTime;
    }
    @Override
    public void updateDateInSql(int AutoPartId, int typeUpdate) throws SQLException{

        switch(typeUpdate){
            case 1:
                updateDateAutoPart = connection.prepareStatement("UPDATE AutoPart SET readTime = now() WHERE id = " + AutoPartId);
                updateDateAutoPart.executeQuery();
                break;
            case 2:
                updateDateAutoPart = connection.prepareStatement("UPDATE AutoPart SET modifyTime = now() WHERE id = " + AutoPartId);
                updateDateAutoPart.executeQuery();
                break;
        }
        return;
    }
    @Override
    public Date checkDateInDatabase(autoPartTime autoPartTime, int dateVariant) throws SQLException{
        Date date = new Date();
        switch (dateVariant){

            case 1: {
                getPartDate = connection.prepareStatement("SELECT createTime FROM AutoPart WHERE id = " + autoPartTime.getId());
                ResultSet rs = getPartDate.executeQuery();
                date = rs.getDate("creationDate");
                break;
            }
            case 2:{
                getPartDate = connection.prepareStatement("SELECT readTime FROM AutoPart WHERE id = " + autoPartTime.getId());
                ResultSet rs = getPartDate.executeQuery();
                date = rs.getDate("readTime");
                break;
            }
            case 3:{
                getPartDate = connection.prepareStatement("SELECT updateTime FROM AutoPart WHERE id = " + autoPartTime.getId());
                ResultSet rs = getPartDate.executeQuery();
                date = rs.getDate("modifyTime");
                break;
            }
        }
        return date;
    }
    @Override
    public Date currentDate(){
        return new Date();
    }
    @Override
    public int addPart(autoPartTime autoPartTime){
        int count = 0;
        try{
            addPartStmt.setString(1, autoPartTime.getPartName());
            addPartStmt.setInt(2, autoPartTime.getPrice());
            count = addPartStmt.executeUpdate();
        } catch (SQLException e){
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }
    @Override
    public int updatePartName(int id, String newName) throws SQLException{
        int count = 0;
        try{
            updateDateAutoPart = connection.prepareStatement("UPDATE AutoPart SET name = " + newName + " WHERE id = " + id);
            updateDateAutoPart.executeQuery();
            updateDateInSql(id, 2);
        }
        catch (SQLException e){
            throw new IllegalStateException(e.getMessage()+"\n"+e.getStackTrace().toString());
        }
        return 0;
    }

    public Date dateConverterFromString(String dateString) throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat("dd-M-yyyy hh:mm:ss");
        return sdf.parse(dateString);
    }

    public List<autoPartTime> getAllParts(){
        List<autoPartTime> autoPartTimeList = new LinkedList<>();
        try{
            getAllAutoPortsStmt = connection.prepareStatement("SELECT  * FROM AutoPart");
            ResultSet rs = getAllAutoPortsStmt.executeQuery();

            while(rs.next()) {
                autoPartTime autoPartTime = new autoPartTime();
                autoPartTime.setId(rs.getInt("id"));
                autoPartTime.setPartName(rs.getString("name"));
                autoPartTime.setPrice(rs.getInt("price"));
                autoPartTime.setCreateTime(rs.getDate("createTime"));
                autoPartTimeList.add(autoPartTime);
            }
        } catch (SQLException e){
            throw new IllegalStateException((e.getMessage() + "\n" + e.getStackTrace().toString()));
        }
        return autoPartTimeList;
    }




}
